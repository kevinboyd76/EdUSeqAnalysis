configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

# Author: Kevin Boyd
# Date: Oct 11, 2024
# Updated: Nov 25, 2024
# Acknowledgments: This was created after reading and modifying an initial Snakefile from Chris Sansam.

import pandas as pd

# Read the CSV file and set an index using the values in the "sample" column.
samples_table = pd.read_csv("config/samples.csv").set_index("sample", drop=False)

# Create a subset of rows where merging is required
merge_groups = samples_table[samples_table['Merged'] != 'NA']

# Create a mapping of merged group to samples
merge_dict = merge_groups.groupby('Merged').apply(lambda df: df['sample'].tolist()).to_dict()

# Debugging step: Print the dictionary
print("Merge Dictionary:", merge_dict)

# Correctly construct merged_samples_table with two columns
merged_samples_table = pd.DataFrame([
    {"merged_sample": key, "samples": value} 
    for key, value in merge_dict.items()
])

# Debugging step: Check the corrected merged_samples_table
print("Corrected Merged Samples Table:")
print(merged_samples_table)

# Set index to 'merged_sample'
merged_samples_table.set_index('merged_sample', inplace=True)

# Input function for FASTQ files (handles merged and unmerged samples)
def fq_dict_from_sample(wildcards):
    print("Processing sample:", wildcards.sample)
    if pd.isna(wildcards.sample):
        raise ValueError("Sample is NaN. Check the input files or merged samples configuration.")
    if wildcards.sample in merged_samples_table.index:
        # Return merged FASTQ files
        return {
            "fq1": f"results/merged/{wildcards.sample}_R1.fastq.gz",
            "fq2": f"results/merged/{wildcards.sample}_R2.fastq.gz"
        }
    elif wildcards.sample in samples_table.index:
        # Return individual FASTQ files
        return {
            "fq1": samples_table.loc[wildcards.sample, "fastq1"],
            "fq2": samples_table.loc[wildcards.sample, "fastq2"]
        }
    else:
        raise KeyError(f"Sample {wildcards.sample} not found in merged or individual samples.")

# Make a new table with only 'treatment' sample rows
treatment_samples = samples_table[samples_table['sampleType'] == 'treatment']

# Input function for treatment and control BAM files (handles merged samples)
def sample_type_dict_from_sample(wildcards):
    if pd.isna(wildcards.sample):
        raise ValueError("Sample is NaN. Check the input files or merged samples configuration.")
    if wildcards.sample in merged_samples_table.index:
        # Get the control from the first sample in the merged group
        control_sample = samples_table.loc[merged_samples_table.loc[wildcards.sample, 'samples'][0], 'Control']
        return {
            "treatment": f"results/aligned/{wildcards.sample}.bam",
            "control": f"results/aligned/{control_sample}.bam"
        }
    elif wildcards.sample in samples_table.index:
        # Use the control column for unmerged samples
        return {
            "treatment": f"results/aligned/{wildcards.sample}.bam",
            "control": f"results/aligned/{samples_table.loc[wildcards.sample, 'Control']}.bam"
        }
    else:
        raise KeyError(f"Sample {wildcards.sample} not found in merged or individual samples.")

# Define the sample-control matching for sigma calculation
def matched_files_from_sample(wildcards):
    if pd.isna(wildcards.sample):
        raise ValueError("Sample is NaN. Check the input files or merged samples configuration.")
    if wildcards.sample in merged_samples_table.index:
        control_sample = samples_table.loc[merged_samples_table.loc[wildcards.sample, 'samples'][0], 'Control']
        return {
            "treatment_sam": f"results/aligned/{wildcards.sample}.sam",
            "adjust_sam": f"results/aligned/{control_sample}.sam"
        }
    elif wildcards.sample in samples_table.index:
        return {
            "treatment_sam": f"results/aligned/{wildcards.sample}.sam",
            "adjust_sam": f"results/aligned/{samples_table.loc[wildcards.sample, 'Control']}.sam"
        }
    else:
        raise KeyError(f"Sample {wildcards.sample} not found in merged or individual samples.")

# Define the sample-adjust file matching for sigma post-processing
def matched_files_for_sigma(wildcards):
    if pd.isna(wildcards.sample):
        raise ValueError("Sample is NaN. Check the input files or merged samples configuration.")
    return {
        "adjusted_sample_counts": f"results/sigma/{wildcards.sample}_adjusted_sample_counts.txt",
        "sample_bin_counts": f"results/sigma/{wildcards.sample}_sample_bin_counts.txt",
        "adjust_csv": f"results/sigma/{wildcards.sample}_adjust.csv"
    }

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # Handle merged and unmerged trimming
        expand("results/trimmed/{sample}_trimmed_R1.fastq.gz", sample=samples_table.index.union(merged_samples_table.index)),
        
        # Include merged samples for aligned BAM files
        expand("results/aligned/{sample}.bam", sample=samples_table.index.union(merged_samples_table.index)),
        
        # Include merged samples for SAM and flagstat files
        expand("results/aligned/{sample}.sam", sample=samples_table.index.union(merged_samples_table.index)),
        expand("results/aligned/{sample}_flagstat.txt", sample=samples_table.index.union(merged_samples_table.index)),
        
        # MACS2 peak calling only applies to treatment samples, including merged treatments
        expand("results/macs2/{sample}_0.05_peaks.broadPeak", sample=treatment_samples.index.union(merged_samples_table.index)),
        
        # BigWig creation for all samples
        expand("results/bigwigs/{sample}.bw", sample=samples_table.index.union(merged_samples_table.index)),
        
        # Sigma outputs for treatment samples
        expand("results/sigma/{sample}_adjusted_sample_counts.txt", sample=treatment_samples.index.union(merged_samples_table.index)),
        expand("results/sigma/{sample}_sample_bin_counts.txt", sample=treatment_samples.index.union(merged_samples_table.index)),
        expand("results/sigma/{sample}_sigma_output.csv", sample=treatment_samples.index.union(merged_samples_table.index)),
        expand("results/sigma/{sample}_sigma_select_EU_0b.csv", sample=treatment_samples.index.union(merged_samples_table.index)),
        expand("results/sigma/{sample}_sigma_mb_sorted.bedGraph", sample=treatment_samples.index.union(merged_samples_table.index))

##################################################################
##                    trim_reads_with_fastp                     ##
##################################################################

rule trim_reads_with_fastp:
    input:
        unpack(fq_dict_from_sample)   # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        trimmed1="results/trimmed/{sample}_trimmed_R1.fastq.gz",
        trimmed2="results/trimmed/{sample}_trimmed_R2.fastq.gz",
        fastp_report="results/qc/fastp_reports/{sample}.html",
        fastp_json="results/qc/fastp_reports/{sample}.json"
    envmodules:
        config["fastp"]
    log: "results/logs/snakelogs/trim_reads_with_fastp.{sample}.log"
    shell:
        """
        fastp -i {input.fq1} -I {input.fq2} -o {output.trimmed1} -O {output.trimmed2} -h {output.fastp_report} --json {output.fastp_json} -R "{wildcards.sample}" -w 8
        """

##################################################################
##                          merge_fastqs                        ##
##################################################################

rule merge_fastq:
    input:
        lambda wildcards: [samples_table.loc[sample, 'fastq1'] for sample in merged_samples_table.loc[wildcards.merged_sample, 'samples']],
        lambda wildcards: [samples_table.loc[sample, 'fastq2'] for sample in merged_samples_table.loc[wildcards.merged_sample, 'samples']]
    output:
        merged_fastq1="results/merged/{merged_sample}_R1.fastq.gz",
        merged_fastq2="results/merged/{merged_sample}_R2.fastq.gz"
    log: "results/logs/snakelogs/merge_fastq.{merged_sample}.log"
    shell:
        """
        cat {input[0]} > {output.merged_fastq1}
        cat {input[1]} > {output.merged_fastq2}
        """

##################################################################
##                   align_reads_with_bwamem                    ##
##################################################################

rule align_reads_with_bwamem:
    input:
        R1="results/trimmed/{sample}_trimmed_R1.fastq.gz",
        R2="results/trimmed/{sample}_trimmed_R2.fastq.gz"
    params:
        genome=config["bwa_genome"],
        blacklist=config["blacklistFile"]
    output:
        bam="results/aligned/{sample}.bam",
        bai="results/aligned/{sample}.bam.bai"
    envmodules:
        config["bwamem2"],
        config["samtools"],
        config["bedtools"]
    log: "results/logs/snakelogs/align_reads_with_bwamem.{sample}.log"
    shell:
        """
        bwa-mem2 mem -M -t 12 {params.genome} {input.R1} {input.R2} |        # Align to genome
        samtools view -b - |                                                 # Convert to BAM format immediately
        bedtools intersect -v -abam - -b {params.blacklist} |                # Exclude blacklist regions
        samtools sort -@ 12 -o {output.bam}                                  # Sort the output
        samtools index -@ 12 {output.bam}                                    # Index the blacklisted BAM
        """

##################################################################
##                   Align Stats & Generate Sam                 ##
##################################################################

rule align_stats_gen_sam:
    input:
        bam="results/aligned/{sample}.bam"
    output:
        sam="results/aligned/{sample}.sam",
        stats="results/aligned/{sample}_flagstat.txt"
    envmodules:
        config["samtools"]
    log: "results/logs/snakelogs/align_stats_gen_sam.{sample}.log"
    shell:
        """
        samtools view -h -o {output.sam} {input.bam}
        samtools flagstat {input.bam} > {output.stats}
        """

##################################################################
##                        MACS2 peak calling                    ##
##################################################################

rule call_peaks_with_macs2:
    input:
        unpack(sample_type_dict_from_sample)
    output:
        "results/macs2/{sample}_0.05_peaks.xls",
        "results/macs2/{sample}_0.05_peaks.broadPeak",
        "results/macs2/{sample}_0.05_peaks.gappedPeak"
    params:
        effective_genome_size=config["effective_genome_size"],
        sample_name="{sample}",
        minimum_FDR_cutoff=config["macs2_minimum_fdr"]
    envmodules:
        config["macs2"]
    log: "results/logs/snakelogs/call_peaks_with_macs2.{sample}.log"
    shell:
        """
        macs2 callpeak -t {input.treatment} -c {input.control} -f BAMPE -g {params.effective_genome_size} -n {params.sample_name}_{params.minimum_FDR_cutoff} -q {params.minimum_FDR_cutoff} --broad --outdir results/macs2/
        """

##################################################################
##                        BigWig creation                       ##
##################################################################

rule make_bigwig:
    input:
        bam="results/aligned/{sample}.bam"
    output:
        bigwig="results/bigwigs/{sample}.bw"
    params:
        bin_size=config["bin_size"],
        mapping_quality=config["mapping_quality"],
        genome_size=config["effective_genome_size"],
        blacklistFile=config["blacklistFile"]
    envmodules:
        config["deeptools"]
    log: "results/logs/snakelogs/make_bigwig.{sample}.log"
    shell:
        """
        bamCoverage -b {input.bam} -o {output.bigwig} --binSize {params.bin_size} --minMappingQuality {params.mapping_quality} --effectiveGenomeSize {params.genome_size} --blackListFileName {params.blacklistFile} -p 8
        """

##################################################################
##                         Bin Processing                       ##
##################################################################

rule bin_processing:
    input:
        unpack(matched_files_from_sample)
    output:
        adjusted_sample_counts="results/sigma/{sample}_adjusted_sample_counts.txt",
        sample_bin_counts="results/sigma/{sample}_sample_bin_counts.txt",
        adjust_csv="results/sigma/{sample}_adjust.csv"
    params:
        bin_size=config["bin_size"],
        mapping_quality=config["mapping_quality"],
        work_dir="results/sigma"
    log: "results/logs/snakelogs/bin_processing.{sample}.log"
    shell:
        """
        bash sigma_calculation/eduseq_bin_processing.sh {input.adjust_sam} {input.treatment_sam} {params.bin_size} {params.mapping_quality} {params.work_dir}
        """

##################################################################
##                         Sigma Analysis                       ##
##################################################################

rule sigma_analysis:
    input:
        adjusted_sample_counts="results/sigma/{sample}_adjusted_sample_counts.txt",
        sample_bin_counts="results/sigma/{sample}_sample_bin_counts.txt",
        adjust_csv="results/sigma/{sample}_adjust.csv"
    output:
        sigma_output="results/sigma/{sample}_sigma_output.csv",
        select_sigma="results/sigma/{sample}_sigma_select_EU_0b.csv"
    params:
        bin_size=config["bin_size"],
        work_dir="results/sigma"
    log: "results/logs/snakelogs/sigma_analysis.{sample}.log"
    shell:
        """
        python sigma_calculation/eduseq_sigma_analysis.py {input.adjusted_sample_counts} {input.sample_bin_counts} {input.adjust_csv} {params.bin_size} {params.work_dir}
        """

##################################################################
##                        Create BedGraphs                      ##
##################################################################

rule create_bedgraphs:
    input:
        select_sigma="results/sigma/{sample}_sigma_select_EU_0b.csv"
    output:
        sigma_mb="results/sigma/{sample}_sigma_mb_sorted.bedGraph"
    params:
        bin_size=config["bin_size"],
        work_dir="results/sigma"
    log: "results/logs/snakelogs/create_bedgraphs.{sample}.log"
    shell:
        "bash sigma_calculation/eduseq_sigma_bedGraphs.sh {input.select_sigma} {params.bin_size} {params.work_dir}"
