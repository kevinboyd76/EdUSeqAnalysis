configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

import pandas as pd

# Read samples CSV and set index
samples_table = pd.read_csv("config/samples.csv").set_index("sample", drop=False)

# Extract unique merged groups
merged_groups = list(set(samples_table["Merged"]))

# Function to get all samples for a given merged group
def filter_sample_by_merged(Merged, samples_table):
    filtered = samples_table[samples_table["Merged"] == Merged]
    return filtered["sample"].tolist()

# Dictionary of all FASTQs by sample
fastqs_by_sample = {
    sample: {
        "fq1": samples_table.loc[sample, "fastq1"],
        "fq2": samples_table.loc[sample, "fastq2"]
    }
    for sample in samples_table.index
}

# sample_type input function definition set to Python dictionary
def sample_type_dict_from_sample(wildcards):
  return {
    "treatment": 'results/aligned/' + samples_table2.loc[wildcards.sample, "sample"] + '.bam',
    "control": 'results/aligned/' + samples_table2.loc[wildcards.sample, "Control"] + '.bam'
  }

# Filter treatment and control samples
treatment_samples = samples_table[samples_table["sampleType"] == "treatment"]
control_samples = samples_table[samples_table["sampleType"] == "control"]

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # Merged FASTQ for each merged group
        expand("results/merged/{Merged}_R1.fastq.gz", Merged=merged_groups),
        expand("results/merged/{Merged}_R2.fastq.gz", Merged=merged_groups),
        # Trimmed FASTQ for each merged group
        expand("results/trimmed/{Merged}_trimmed_R1.fastq.gz", Merged=merged_groups),
        # Aligned BAM for each merged group
        expand("results/aligned/{Merged}.bam", Merged=merged_groups),
        expand("results/aligned/{Merged}.sam", Merged=merged_groups),
        expand("results/aligned/{Merged}_flagstat.txt", Merged=merged_groups),
        # MACS2 peaks for merged treatment groups
        expand("results/macs2/{Merged}_0.05_peaks.broadPeak", Merged=list(set(treatment_samples["Merged"]))),
        # BigWigs for each merged group
        expand("results/bigwigs/{Merged}.bw", Merged=merged_groups),
        # Sigma-related outputs for treatment merged groups
        expand("results/sigma/{Merged}_adjusted_sample_counts.txt", Merged=list(set(treatment_samples["Merged"]))),
        expand("results/sigma/{Merged}_sample_bin_counts.txt", Merged=list(set(treatment_samples["Merged"]))),
        expand("results/sigma/{Merged}_sigma_output.csv", Merged=list(set(treatment_samples["Merged"]))),
        expand("results/sigma/{Merged}_sigma_select_EU_0b.csv", Merged=list(set(treatment_samples["Merged"]))),
        expand("results/sigma/{Merged}_sigma_mb_sorted.bedGraph", Merged=list(set(treatment_samples["Merged"])))


##################################################################
##                    Merge FASTQs per Merged Group             ##
##################################################################

rule merge_fastqs:
    input:
        fq1=lambda wildcards: [fastqs_by_sample[s]["fq1"] for s in filter_sample_by_merged(wildcards.Merged, samples_table)],
        fq2=lambda wildcards: [fastqs_by_sample[s]["fq2"] for s in filter_sample_by_merged(wildcards.Merged, samples_table)]
    output:
        merged_fq1="results/merged/{Merged}_R1.fastq.gz",
        merged_fq2="results/merged/{Merged}_R2.fastq.gz"
    log:
        "results/logs/snakelogs/merge_fastqs.{Merged}.log"
    shell:
        """
        zcat {input.fq1} | gzip > {output.merged_fq1}
        zcat {input.fq2} | gzip > {output.merged_fq2}
        """

##################################################################
##                    trim_reads_with_fastp                     ##
##################################################################

rule trim_reads_with_fastp:
    input:
        fq1="results/merged/{Merged}_R1.fastq.gz",
        fq2="results/merged/{Merged}_R2.fastq.gz"
    output:
        trimmed1="results/trimmed/{Merged}_trimmed_R1.fastq.gz",
        trimmed2="results/trimmed/{Merged}_trimmed_R2.fastq.gz",
        fastp_report="results/qc/fastp_reports/{Merged}.html",
        fastp_json="results/qc/fastp_reports/{Merged}.json"
    envmodules:
        config["fastp"]
    log:
        "results/logs/snakelogs/trim_reads_with_fastp.{Merged}.log"
    shell:
        """
        fastp -i {input.fq1} -I {input.fq2} -o {output.trimmed1} -O {output.trimmed2} \
              -h {output.fastp_report} --json {output.fastp_json} -R "{wildcards.Merged}" -w 8
        """

##################################################################
##                   align_reads_with_bwamem                    ##
##################################################################

rule align_reads_with_bwamem:
    input:
        R1="results/trimmed/{Merged}_trimmed_R1.fastq.gz",
        R2="results/trimmed/{Merged}_trimmed_R2.fastq.gz"
    params:
        genome=config["bwa_genome"],
        blacklist=config["blacklistFile"]
    output:
        bam="results/aligned/{Merged}.bam",
        bai="results/aligned/{Merged}.bam.bai"
    envmodules:
        config["bwamem2"],
        config["samtools"],
        config["bedtools"]
    log:
        "results/logs/snakelogs/align_reads_with_bwamem.{Merged}.log"
    shell:
        """
        bwa-mem2 mem -M -t 12 {params.genome} {input.R1} {input.R2} | \
        samtools view -b - | \
        bedtools intersect -v -abam - -b {params.blacklist} | \
        samtools sort -@ 12 -o {output.bam}
        samtools index -@ 12 {output.bam}
        """

##################################################################
##                   Align Stats & Generate Sam                 ##
##################################################################

rule align_stats_gen_sam:
    input:
        bam="results/aligned/{Merged}.bam"
    output:
        sam="results/aligned/{Merged}.sam",
        stats="results/aligned/{Merged}_flagstat.txt"
    envmodules:
        config["samtools"]
    log:
        "results/logs/snakelogs/align_stats_gen_sam.{Merged}.log"
    shell:
        """
        samtools view -h -o {output.sam} {input.bam}
        samtools flagstat {input.bam} > {output.stats}
        """

##################################################################
##                        MACS2 peak calling                    ##
##################################################################

rule call_peaks_with_macs2:
    input:
        unpack(sample_type_dict_from_sample)  # Provides input.treatment and input.control
    output:
        "results/macs2/{sample}_0.05_peaks.xls",
        "results/macs2/{sample}_0.05_peaks.broadPeak",
        "results/macs2/{sample}_0.05_peaks.gappedPeak"
    params:
        effective_genome_size=config["effective_genome_size"],
        sample_name="{sample}",
        minimum_FDR_cutoff=config["macs2_minimum_fdr"],
        control_arg=lambda wildcards, input: f"-c {input.control}" if input.control else ""
    envmodules:
        config["macs2"]
    log: "results/logs/snakelogs/call_peaks_with_macs2.{sample}.log"
    shell:
        """
        macs2 callpeak -t {input.treatment} {params.control_arg} -f BAMPE \
                       -g {params.effective_genome_size} \
                       -n {params.sample_name}_{params.minimum_FDR_cutoff} \
                       -q {params.minimum_FDR_cutoff} --broad --outdir results/macs2/
        """

##################################################################
##                        BigWig creation                       ##
##################################################################

rule make_bigwig:
    input:
        bam="results/aligned/{Merged}.bam"
    output:
        bigwig="results/bigwigs/{Merged}.bw"
    params:
        bin_size=config["bin_size"],
        mapping_quality=config["mapping_quality"],
        genome_size=config["effective_genome_size"],
        blacklistFile=config["blacklistFile"]
    envmodules:
        config["deeptools"]
    log:
        "results/logs/snakelogs/make_bigwig.{Merged}.log"
    shell:
        """
        bamCoverage -b {input.bam} -o {output.bigwig} \
                    --binSize {params.bin_size} \
                    --minMappingQuality {params.mapping_quality} \
                    --effectiveGenomeSize {params.genome_size} \
                    --blackListFileName {params.blacklistFile} -p 8
        """

##################################################################
##                         Bin Processing                       ##
##################################################################

def sigma_matched_files(Merged):
    treat_rows = treatment_samples[treatment_samples["Merged"] == Merged]
    treatment_sample = treat_rows.iloc[0]["sample"]
    control_sample = treat_rows.iloc[0]["Control"]
    treatment_sam = f"results/aligned/{Merged}.sam"
    control_sam = f"results/aligned/{control_sample}.sam"
    return treatment_sam, control_sam

rule bin_processing:
    input:
        unpack(lambda wildcards: {
            "treatment_sam": sigma_matched_files(wildcards.Merged)[0],
            "adjust_sam": sigma_matched_files(wildcards.Merged)[1]
        })
    output:
        adjusted_sample_counts="results/sigma/{Merged}_adjusted_sample_counts.txt",
        sample_bin_counts="results/sigma/{Merged}_sample_bin_counts.txt",
        adjust_csv="results/sigma/{Merged}_adjust.csv"
    params:
        bin_size=config["bin_size"],
        mapping_quality=config["mapping_quality"],
        work_dir="results/sigma"
    log:
        "results/logs/snakelogs/bin_processing.{Merged}.log"
    shell:
        """
        bash sigma_calculation/eduseq_bin_processing.sh {input.adjust_sam} {input.treatment_sam} \
             {params.bin_size} {params.mapping_quality} {params.work_dir}
        """

##################################################################
##                         Sigma Analysis                       ##
##################################################################

rule sigma_analysis:
    input:
        adjusted_sample_counts="results/sigma/{Merged}_adjusted_sample_counts.txt",
        sample_bin_counts="results/sigma/{Merged}_sample_bin_counts.txt",
        adjust_csv="results/sigma/{Merged}_adjust.csv"
    output:
        sigma_output="results/sigma/{Merged}_sigma_output.csv",
        select_sigma="results/sigma/{Merged}_sigma_select_EU_0b.csv"
    params:
        bin_size=config["bin_size"],
        work_dir="results/sigma"
    log:
        "results/logs/snakelogs/sigma_analysis.{Merged}.log"
    shell:
        """
        python sigma_calculation/eduseq_sigma_analysis.py {input.adjusted_sample_counts} \
               {input.sample_bin_counts} {input.adjust_csv} {params.bin_size} {params.work_dir}
        """

##################################################################
##                        Create BedGraphs                      ##
##################################################################

rule create_bedgraphs:
    input:
        select_sigma="results/sigma/{Merged}_sigma_select_EU_0b.csv"
    output:
        sigma_mb="results/sigma/{Merged}_sigma_mb_sorted.bedGraph"
    params:
        bin_size=config["bin_size"],
        work_dir="results/sigma"
    log:
        "results/logs/snakelogs/create_bedgraphs.{Merged}.log"
    shell:
        "bash sigma_calculation/eduseq_sigma_bedGraphs.sh {input.select_sigma} {params.bin_size} {params.work_dir}"

